---
title: "Data Harmonisation of Swiss Open Government Data"
author: "Nicole Pauli"
format: pdf
editor: visual
---

## Introduction

Open Government Data (explanation about the OGD environment in Switzerland)\
Legislation "open by default" / EMBAG and its consequences for government workers / data scientists

## Challenges of Open Government Data

Data is being published from 26 cantons as well as the federal offices (federal, cantonal and communal data)

Linguistic diversity (DE, FR, IT, RUM)

Data with similar structure is being collected from different points

*Te Swiss OGD strategy emphasizes the need for published data to meet defined quality standards and use standardized metadata. However, achieving this consistently across various government departments and levels (federal, cantonal, and communal) remains a challenge.*

### Challenges concerning platforms

*Platform Traps Swiss OGD providers face several “platform traps” that impede progress: 1. Chicken-or-egg problem: Attracting both data providers and users simultaneously to create a thriving ecosystem. 2. Penguin problem: Hesitation among data providers to be the first to share their data. 3. Emergence concept: Difficulty in fostering self-organizing growth and evolution of the platform.*

## Data Governance / legal framework for open data

*There is a lack of robust data governance practices in Swiss public organizations, which hinders the effective management and sharing of data. This gap in governance may prevent OGD providers from adequately addressing platform challenges and fully realizing the potential of open data.*

## Algorithmic Application to help harmonize Open Government Data

**Aim of the application**

-   support academics, government workers and everyone else in using and linking open government data

-   

## Procedure

-   **Create a Test Dataset Repository** (using the opendata.swiss API)

    -   Collect representative samples of datasets from opendata.swiss

    -   Document their inconsistencies and harmonization challenges

    -   These become the test cases for the frontend tool

-   **Design an Iterative Development Process**:

    -   Analyze existing data inconsistencies (backend focus)

    -   Design standardization rules and validation logic to prevent those specific issues (frontend focus)

    -   Test whether the frontend tool would have prevented the issues found in real data

-   **Build a Demonstration Workflow**:

    -   Show "before" (raw data from different sources)

    -   Apply the frontend standardization tool

    -   Compare the results with what a backend harmonization would have needed to do

**For R-based implementation:**

1.  Use existing data from opendata.swiss to identify common inconsistencies

2.  Create an R Shiny application that guides data uploaders through a standardization process

3.  Include validation checks that prevent the specific issues you found in the real data

4.  Demonstrate how clean the data would be if the tool had been used
